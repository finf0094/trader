"""
–ü—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
"""

import threading
import time
import logging
import sys
import os
from auto_trader import AutoTrader
from web_interface import app

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log'),
        logging.StreamHandler()
    ]
)

class ProductionTrader:
    """–ü—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞"""

    def __init__(self):
        self.trader = AutoTrader()
        self.web_thread = None
        self.running = False

    def start_web_interface(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ"""
        def run_flask():
            # –û—Ç–∫–ª—é—á–∞–µ–º debug —Ä–µ–∂–∏–º –∏ reloader –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
            app.run(
                host='0.0.0.0',
                port=5000,
                debug=False,
                use_reloader=False,
                threaded=True
            )

        self.web_thread = threading.Thread(target=run_flask, daemon=True)
        self.web_thread.start()
        logging.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:5000")

    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ"""
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.start_web_interface()

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        time.sleep(2)

        logging.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        logging.info("üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
        logging.info("ü§ñ Telegram –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ API")

        self.running = True

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
        try:
            while self.running:
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ–±-–ø–æ—Ç–æ–∫ –µ—â–µ –∂–∏–≤
                if self.web_thread and not self.web_thread.is_alive():
                    logging.error("‚ùå –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                    self.start_web_interface()

        except KeyboardInterrupt:
            logging.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            self.stop()
        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False
        if hasattr(self.trader, 'stop_trading'):
            self.trader.stop_trading()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–ø—É—Å–∫–∞"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists('auto_trader.py'):
        logging.error("‚ùå –§–∞–π–ª auto_trader.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        sys.exit(1)

    if not os.path.exists('web_interface.py'):
        logging.error("‚ùå –§–∞–π–ª web_interface.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω —Ç—Ä–µ–π–¥–µ—Ä
    production_trader = ProductionTrader()

    try:
        production_trader.start()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
