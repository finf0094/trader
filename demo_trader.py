import pandas as pd
import yfinance as yf
import time
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('demo_trader.log'),
        logging.StreamHandler()
    ]
)

class DemoTrader:
    """–ü—Ä–æ—Å—Ç–æ–π –¥–µ–º–æ-—Ç—Ä–µ–π–¥–µ—Ä –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self):
        self.symbols = ['AAPL', 'MSFT', 'NVDA', 'META', 'GOOGL']
        self.equity = 10000
        self.positions = {}
        self.running = False

    def get_current_price(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            logging.info(f"üîç –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
            ticker = yf.Ticker(symbol)
            data = ticker.history(period="1d", interval="5m")

            if not data.empty:
                price = data['Close'].iloc[-1]
                logging.info(f"üí∞ {symbol}: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ${price:.2f}")
                return price
            else:
                logging.warning(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return 0
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return 0

    def analyze_symbol(self, symbol):
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            logging.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...")

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            ticker = yf.Ticker(symbol)
            data = ticker.history(period="5d", interval="15m")

            if len(data) < 50:
                logging.warning(f"‚ö†Ô∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(data)} –∑–∞–ø–∏—Å–µ–π)")
                return "HOLD", 0

            logging.info(f"üìà {symbol}: –ø–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö")

            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: SMA 10 –∏ 20
            close = data['Close']
            sma_10 = close.rolling(10).mean()
            sma_20 = close.rolling(20).mean()

            current_price = close.iloc[-1]
            sma10_current = sma_10.iloc[-1]
            sma20_current = sma_20.iloc[-1]
            sma10_prev = sma_10.iloc[-2]
            sma20_prev = sma_20.iloc[-2]

            logging.info(f"üìä {symbol}: SMA10={sma10_current:.2f}, SMA20={sma20_current:.2f}")

            # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: SMA10 –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç SMA20 —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
            if sma10_current > sma20_current and sma10_prev <= sma20_prev:
                logging.info(f"üü¢ {symbol}: –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò! (SMA –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ)")
                return "BUY", current_price

            # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: SMA10 –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç SMA20 —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
            elif sma10_current < sma20_current and sma10_prev >= sma20_prev:
                logging.info(f"üî¥ {symbol}: –°–ò–ì–ù–ê–õ –ü–†–û–î–ê–ñ–ò! (SMA –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ)")
                return "SELL", current_price

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –¥–µ–º–æ
            elif current_price > sma10_current and current_price > sma20_current:
                # –¶–µ–Ω–∞ –≤—ã—à–µ –æ–±–µ–∏—Ö SMA - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
                if len([s for s in self.positions if self.positions[s] > 0]) == 0:  # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π
                    logging.info(f"üü° {symbol}: –°–õ–ê–ë–´–ô –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò (—Ü–µ–Ω–∞ –≤—ã—à–µ SMA)")
                    return "BUY", current_price

            logging.info(f"‚ö™ {symbol}: –£–î–ï–†–ñ–ê–ù–ò–ï (–Ω–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤)")
            return "HOLD", current_price

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return "HOLD", 0

    def execute_trade(self, symbol, signal, price):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        if signal == "BUY" and symbol not in self.positions:
            # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ $2000
            quantity = 2000 / price
            self.positions[symbol] = quantity
            self.equity -= 2000

            logging.info(f"‚úÖ –ü–û–ö–£–ü–ö–ê –ò–°–ü–û–õ–ù–ï–ù–ê: {symbol}")
            logging.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.2f} –∞–∫—Ü–∏–π")
            logging.info(f"   –¶–µ–Ω–∞: ${price:.2f}")
            logging.info(f"   –°—É–º–º–∞: $2000.00")
            logging.info(f"   –û—Å—Ç–∞—Ç–æ–∫ –∫–∞–ø–∏—Ç–∞–ª–∞: ${self.equity:.2f}")

        elif signal == "SELL" and symbol in self.positions:
            # –ü—Ä–æ–¥–∞–µ–º
            quantity = self.positions[symbol]
            value = quantity * price
            profit = value - 2000

            del self.positions[symbol]
            self.equity += value

            logging.info(f"‚úÖ –ü–†–û–î–ê–ñ–ê –ò–°–ü–û–õ–ù–ï–ù–ê: {symbol}")
            logging.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.2f} –∞–∫—Ü–∏–π")
            logging.info(f"   –¶–µ–Ω–∞: ${price:.2f}")
            logging.info(f"   –°—É–º–º–∞: ${value:.2f}")
            logging.info(f"   –ü—Ä–∏–±—ã–ª—å: ${profit:.2f}")
            logging.info(f"   –ö–∞–ø–∏—Ç–∞–ª: ${self.equity:.2f}")

    def run_demo(self, cycles=5):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞"""
        logging.info("üöÄ –ó–ê–ü–£–°–ö –î–ï–ú–û-–¢–†–ï–ô–î–ï–†–ê")
        logging.info("=" * 50)
        logging.info(f"–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${self.equity:.2f}")
        logging.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã: {', '.join(self.symbols)}")
        logging.info("=" * 50)

        for cycle in range(cycles):
            logging.info(f"\nüîÑ –¶–ò–ö–õ {cycle + 1}/{cycles}")
            logging.info(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")

            for symbol in self.symbols:
                signal, price = self.analyze_symbol(symbol)

                if signal in ["BUY", "SELL"] and price > 0:
                    self.execute_trade(symbol, signal, price)

                time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏

            # –°—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            total_value = self.equity
            for symbol, quantity in self.positions.items():
                current_price = self.get_current_price(symbol)
                if current_price > 0:
                    total_value += quantity * current_price

            logging.info(f"\nüíº –°–¢–ê–¢–£–° –ü–û–†–¢–§–ï–õ–Ø:")
            logging.info(f"   –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: ${self.equity:.2f}")
            logging.info(f"   –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(self.positions)}")
            for symbol, quantity in self.positions.items():
                current_price = self.get_current_price(symbol)
                value = quantity * current_price if current_price > 0 else 0
                logging.info(f"   {symbol}: {quantity:.2f} –∞–∫—Ü–∏–π (${value:.2f})")
            logging.info(f"   –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: ${total_value:.2f}")
            logging.info(f"   –ü–†–ò–ë–´–õ–¨/–£–ë–´–¢–û–ö: ${total_value - 10000:.2f}")

            if cycle < cycles - 1:
                logging.info(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                time.sleep(30)

        logging.info("\nüèÅ –î–ï–ú–û –ó–ê–í–ï–†–®–ï–ù–û!")

if __name__ == "__main__":
    demo = DemoTrader()
    demo.run_demo(cycles=3)  # 3 —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
