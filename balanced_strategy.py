import pandas as pd
import yfinance as yf
from backtesting import Backtest, Strategy
import numpy as np

class BalancedTradingStrategy(Strategy):
    """
    –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å —Ä–∞–∑—É–º–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    """
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    sma_fast = 10
    sma_slow = 25
    rsi_period = 14
    atr_period = 14

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
    stop_loss_pct = 0.08      # 8% —Å—Ç–æ–ø-–ª–æ—Å—Å
    take_profit_pct = 0.15    # 15% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    max_drawdown_limit = 0.20 # 20% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
    position_size = 0.8       # 80% –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏

    # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    rsi_lower = 25            # RSI –Ω–∏–∂–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    rsi_upper = 75            # RSI –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å

    def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        close = pd.Series(self.data.Close)
        high = pd.Series(self.data.High)
        low = pd.Series(self.data.Low)

        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        self.sma_fast_line = self.I(lambda: close.rolling(self.sma_fast).mean())
        self.sma_slow_line = self.I(lambda: close.rolling(self.sma_slow).mean())

        # RSI
        self.rsi = self.I(self._calculate_rsi, close, self.rsi_period)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.entry_price = 0
        self.initial_equity = self.equity

    def _calculate_rsi(self, prices: pd.Series, period: int) -> pd.Series:
        """–†–∞—Å—á–µ—Ç RSI"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()

        # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        gain = gain.fillna(0)
        loss = loss.fillna(0)

        rs = gain / (loss + 1e-10)  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        rsi = 100 - (100 / (1 + rs))
        return rsi.fillna(50)  # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º RSI

    def _check_drawdown_limit(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ—Å–∞–¥–∫–∏"""
        current_drawdown = (self.initial_equity - self.equity) / self.initial_equity
        return current_drawdown < self.max_drawdown_limit

    def _get_trend_direction(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
        if len(self.data) < self.sma_slow:
            return "neutral"

        fast_sma = self.sma_fast_line[-1]
        slow_sma = self.sma_slow_line[-1]
        price = self.data.Close[-1]

        if fast_sma > slow_sma and price > slow_sma:
            return "bullish"
        elif fast_sma < slow_sma and price < slow_sma:
            return "bearish"
        else:
            return "neutral"

    def next(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
        if len(self.data) < max(self.sma_slow, self.rsi_period):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
        if not self._check_drawdown_limit():
            if self.position:
                self.position.close()
            return

        # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        price = self.data.Close[-1]
        fast_sma = self.sma_fast_line[-1]
        slow_sma = self.sma_slow_line[-1]
        rsi_val = self.rsi[-1]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        trend = self._get_trend_direction()

        # –õ–û–ì–ò–ö–ê –í–•–û–î–ê –í –ü–û–ó–ò–¶–ò–Æ
        if not self.position:
            # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
            bullish_cross = (fast_sma > slow_sma and
                           self.sma_fast_line[-2] <= self.sma_slow_line[-2])

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª: —Ü–µ–Ω–∞ –≤—ã—à–µ –æ–±–µ–∏—Ö SMA
            price_momentum = (price > fast_sma and
                            price > slow_sma and
                            self.data.Close[-1] > self.data.Close[-2])

            # RSI —Ñ–∏–ª—å—Ç—Ä - –Ω–µ –ø–æ–∫—É–ø–∞–µ–º –≤ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
            rsi_ok = rsi_val < self.rsi_upper

            # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
            buy_signal = ((bullish_cross or price_momentum) and
                         rsi_ok and
                         trend in ["bullish", "neutral"])

            if buy_signal:
                self.buy(size=self.position_size)
                self.entry_price = price

        # –õ–û–ì–ò–ö–ê –í–´–•–û–î–ê –ò–ó –ü–û–ó–ò–¶–ò–ò
        elif self.position:
            # –°—Ç–æ–ø-–ª–æ—Å—Å
            stop_loss_price = self.entry_price * (1 - self.stop_loss_pct)

            # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            take_profit_price = self.entry_price * (1 + self.take_profit_pct)

            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            bearish_cross = (fast_sma < slow_sma and
                           self.sma_fast_line[-2] >= self.sma_slow_line[-2])

            # RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
            rsi_exit = rsi_val > self.rsi_upper

            # –¶–µ–Ω–∞ –Ω–∏–∂–µ –º–µ–¥–ª–µ–Ω–Ω–æ–π SMA (–ø–æ—Ç–µ—Ä—è —Ç—Ä–µ–Ω–¥–∞)
            trend_break = price < slow_sma

            # –£—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞
            exit_conditions = [
                price <= stop_loss_price,    # –°—Ç–æ–ø-–ª–æ—Å—Å
                price >= take_profit_price,  # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
                bearish_cross,               # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª
                (rsi_exit and trend_break)   # RSI + –ø–æ—Ç–µ—Ä—è —Ç—Ä–µ–Ω–¥–∞
            ]

            if any(exit_conditions):
                self.position.close()
                self.entry_price = 0

def run_enhanced_backtest(ticker: str, start_date: str = '2020-01-01', end_date: str = '2024-01-01'):
    """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}...")
        df = yf.download(ticker, start=start_date, end=end_date, interval='1d')

        if df.empty or len(df) < 100:
            return None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if isinstance(df.columns, pd.MultiIndex):
            df.columns = df.columns.droplevel(1)

        df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()
        df.dropna(inplace=True)
        df.reset_index(inplace=True)

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        split_point = int(len(df) * 0.7)
        df_train = df[:split_point].copy()
        df_test = df[split_point:].copy()

        print(f"  –ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è: {len(df_train)} –¥–Ω–µ–π")
        print(f"  –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(df_test)} –¥–Ω–µ–π")

        # –ë—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bt_train = Backtest(df_train, BalancedTradingStrategy, cash=10000, commission=0.001)
        stats_train = bt_train.run()

        bt_test = Backtest(df_test, BalancedTradingStrategy, cash=10000, commission=0.001)
        stats_test = bt_test.run()

        # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        def safe_get(stats, key, default=0):
            try:
                return stats[key] if not pd.isna(stats[key]) else default
            except:
                return default

        result = {
            'ticker': ticker,
            'train_return': safe_get(stats_train, 'Return [%]'),
            'test_return': safe_get(stats_test, 'Return [%]'),
            'train_sharpe': safe_get(stats_train, 'Sharpe Ratio'),
            'test_sharpe': safe_get(stats_test, 'Sharpe Ratio'),
            'train_max_dd': safe_get(stats_train, 'Max. Drawdown [%]'),
            'test_max_dd': safe_get(stats_test, 'Max. Drawdown [%]'),
            'train_trades': len(stats_train['_trades']),
            'test_trades': len(stats_test['_trades']),
            'train_win_rate': safe_get(stats_train, 'Win Rate [%]'),
            'test_win_rate': safe_get(stats_test, 'Win Rate [%]'),
            'buy_hold_return': ((df['Close'].iloc[-1] / df['Close'].iloc[0]) - 1) * 100
        }

        return result

    except Exception as e:
        print(f"  –û—à–∏–±–∫–∞ –¥–ª—è {ticker}: {e}")
        return None

def analyze_strategy_performance(results):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    if not results:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    df = pd.DataFrame(results)

    print("\n" + "=" * 120)
    print("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 120)

    for _, row in df.iterrows():
        print(f"\nüìä {row['ticker']}:")
        print(f"   –û–±—É—á–µ–Ω–∏–µ:    Return: {row['train_return']:6.1f}% | MaxDD: {row['train_max_dd']:6.1f}% | Trades: {row['train_trades']:2d} | WinRate: {row['train_win_rate']:5.1f}%")
        print(f"   –¢–µ—Å—Ç:        Return: {row['test_return']:6.1f}% | MaxDD: {row['test_max_dd']:6.1f}% | Trades: {row['test_trades']:2d} | WinRate: {row['test_win_rate']:5.1f}%")
        print(f"   Buy & Hold:  Return: {row['buy_hold_return']:6.1f}%")

        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        consistency = abs(row['train_return'] - row['test_return'])
        outperforms_bh = row['test_return'] > row['buy_hold_return']
        good_drawdown = row['test_max_dd'] > -25
        enough_trades = row['test_trades'] >= 2

        score = sum([
            consistency < 30,      # –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
            outperforms_bh,        # –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç Buy & Hold
            good_drawdown,         # –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            enough_trades,         # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–¥–µ–ª–æ–∫
            row['test_return'] > 0 # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        ])

        print(f"   –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {score}/5 {'‚úÖ' if score >= 3 else '‚ùå'}")

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 120)
    print("–°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 120)

    avg_test_return = df['test_return'].mean()
    avg_train_return = df['train_return'].mean()
    avg_consistency = abs(df['train_return'] - df['test_return']).mean()
    outperformed_bh = (df['test_return'] > df['buy_hold_return']).sum()
    positive_returns = (df['test_return'] > 0).sum()

    print(f"üìà –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–µ: {avg_test_return:.1f}%")
    print(f"üìä –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {avg_consistency:.1f}%")
    print(f"üèÜ –ü—Ä–µ–≤–∑–æ—à–ª–∏ Buy & Hold: {outperformed_bh}/{len(df)} –∞–∫—Ç–∏–≤–æ–≤")
    print(f"‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {positive_returns}/{len(df)} –∞–∫—Ç–∏–≤–æ–≤")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 120)
    print("–ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 120)

    good_performers = df[(df['test_return'] > 0) &
                        (df['test_max_dd'] > -25) &
                        (df['test_trades'] >= 2)]['ticker'].tolist()

    if good_performers:
        print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã: {', '.join(good_performers)}")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:")
        print("   1. –§–æ—Ä–≤–∞—Ä–¥-—Ç–µ—Å—Ç –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ 3-6 –º–µ—Å—è—Ü–µ–≤")
        print("   2. –ù–∞—á–∞—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ (100-500$)")
        print("   3. –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞–º")
        print("   4. –í–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–Ω–µ–≤–Ω–∏–∫")
        print("   5. –ù–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª–µ–µ 2% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Å–¥–µ–ª–∫—É")
    else:
        print("‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("\nüìã –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
        print("   1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print("   2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        print("   3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö")
        print("   4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö
    tickers = ['AAPL', 'MSFT', 'NVDA', 'TSLA', 'META', 'GOOGL', 'AMZN', 'SPY']

    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–ô –¢–û–†–ì–û–í–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("=" * 120)

    results = []
    for ticker in tickers:
        result = run_enhanced_backtest(ticker)
        if result:
            results.append(result)

    analyze_strategy_performance(results)
