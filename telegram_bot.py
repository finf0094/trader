"""
Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional

import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TradingTelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤–ª–µ"""

    def __init__(self, bot_token: str, chat_id: str, trader_api_url: str = "http://localhost:5000"):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.trader_api_url = trader_api_url

        self.bot = Bot(token=bot_token)
        self.dp = Dispatcher()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()

        # –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.notifications_enabled = True
        self.last_positions = {}

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            """–ö–æ–º–∞–Ω–¥–∞ /start"""
            keyboard = self._get_main_keyboard()

            await message.answer(
                "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–æ—Ä–≥–æ–≤–æ–≥–æ –ë–æ—Ç–∞!</b>\n\n"
                "–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:\n"
                "üí∞ –ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π\n"
                "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è\n"
                "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=keyboard
            )

        @self.dp.message(Command("status"))
        async def cmd_status(message: types.Message):
            """–ö–æ–º–∞–Ω–¥–∞ /status"""
            await self._send_status(message.chat.id)

        @self.dp.message(Command("positions"))
        async def cmd_positions(message: types.Message):
            """–ö–æ–º–∞–Ω–¥–∞ /positions"""
            await self._send_positions(message.chat.id)

        @self.dp.message(Command("stats"))
        async def cmd_stats(message: types.Message):
            """–ö–æ–º–∞–Ω–¥–∞ /stats"""
            await self._send_statistics(message.chat.id)

        @self.dp.message(Command("settings"))
        async def cmd_settings(message: types.Message):
            """–ö–æ–º–∞–Ω–¥–∞ /settings"""
            await self._send_settings(message.chat.id)

        @self.dp.callback_query()
        async def process_callback(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
            await self._handle_callback(callback)

    def _get_main_keyboard(self) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
            InlineKeyboardButton(text="üíº –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")
        )
        builder.row(
            InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        )
        builder.row(
            InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start_trading"),
            InlineKeyboardButton(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_trading")
        )
        return builder.as_markup()

    def _get_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        builder = InlineKeyboardBuilder()

        notify_text = "üîï –í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if self.notifications_enabled else "üîî –í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        builder.row(
            InlineKeyboardButton(text=notify_text, callback_data="toggle_notifications")
        )
        builder.row(
            InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç", callback_data="reset_account")
        )
        builder.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        return builder.as_markup()

    async def _handle_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        data = callback.data

        if data == "status":
            await self._send_status(callback.message.chat.id, callback.message.message_id)
        elif data == "positions":
            await self._send_positions(callback.message.chat.id, callback.message.message_id)
        elif data == "stats":
            await self._send_statistics(callback.message.chat.id, callback.message.message_id)
        elif data == "settings":
            await self._send_settings(callback.message.chat.id, callback.message.message_id)
        elif data == "start_trading":
            await self._start_trading(callback.message.chat.id, callback.message.message_id)
        elif data == "stop_trading":
            await self._stop_trading(callback.message.chat.id, callback.message.message_id)
        elif data == "toggle_notifications":
            await self._toggle_notifications(callback.message.chat.id, callback.message.message_id)
        elif data == "reset_account":
            await self._reset_account(callback.message.chat.id, callback.message.message_id)
        elif data == "main_menu":
            await self._send_main_menu(callback.message.chat.id, callback.message.message_id)

        await callback.answer()

    async def _send_status(self, chat_id: int, message_id: Optional[int] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.trader_api_url}/api/status") as response:
                    if response.status == 200:
                        data = await response.json()

                        status_emoji = "üü¢" if data.get('running', False) else "üî¥"
                        status_text = "–†–∞–±–æ—Ç–∞–µ—Ç" if data.get('running', False) else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

                        equity = data.get('equity', 0)
                        unrealized_pnl = data.get('unrealized_pnl', 0)
                        total_equity = data.get('total_equity', 0)
                        positions_count = data.get('positions_count', 0)

                        pnl_emoji = "üìà" if unrealized_pnl >= 0 else "üìâ"
                        pnl_sign = "+" if unrealized_pnl >= 0 else ""

                        text = (
                            f"üìä <b>–°—Ç–∞—Ç—É—Å —Ç—Ä–µ–π–¥–µ—Ä–∞</b>\n\n"
                            f"{status_emoji} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {status_text}\n"
                            f"üí∞ <b>–ö–∞–ø–∏—Ç–∞–ª:</b> ${equity:.2f}\n"
                            f"{pnl_emoji} <b>–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L:</b> {pnl_sign}${unrealized_pnl:.2f}\n"
                            f"üíé <b>–û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:</b> ${total_equity:.2f}\n"
                            f"üìà <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> {positions_count}\n\n"
                            f"üïí <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>"
                        )

                        keyboard = self._get_main_keyboard()

                        if message_id:
                            try:
                                await self.bot.edit_message_text(
                                    text=text,
                                    chat_id=chat_id,
                                    message_id=message_id,
                                    parse_mode="HTML",
                                    reply_markup=keyboard
                                )
                            except Exception as edit_error:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                if "message is not modified" in str(edit_error):
                                    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                                else:
                                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
                                    await self.bot.send_message(
                                        chat_id=chat_id,
                                        text=text,
                                        parse_mode="HTML",
                                        reply_markup=keyboard
                                    )
                        else:
                            await self.bot.send_message(
                                chat_id=chat_id,
                                text=text,
                                parse_mode="HTML",
                                reply_markup=keyboard
                            )
                    else:
                        await self._send_error_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–π–¥–µ—Ä–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await self._send_error_message(chat_id, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ç—Ä–µ–π–¥–µ—Ä–æ–º")

    async def _send_positions(self, chat_id: int, message_id: Optional[int] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.trader_api_url}/api/status") as response:
                    if response.status == 200:
                        data = await response.json()
                        positions = data.get('positions', [])

                        if not positions:
                            text = "üíº <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
                        else:
                            text = "üíº <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"

                            for pos in positions:
                                pnl = pos.get('unrealized_pnl', 0)
                                pnl_emoji = "üìà" if pnl >= 0 else "üìâ"
                                pnl_sign = "+" if pnl >= 0 else ""

                                text += (
                                    f"üìä <b>{pos['symbol']}</b>\n"
                                    f"  üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pos['quantity']:.2f}\n"
                                    f"  üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${pos['entry_price']:.2f}\n"
                                    f"  üìä –¢–µ–∫—É—â–∞—è: ${pos['current_price']:.2f}\n"
                                    f"  {pnl_emoji} P&L: {pnl_sign}${pnl:.2f}\n\n"
                                )

                        keyboard = self._get_main_keyboard()

                        if message_id:
                            try:
                                await self.bot.edit_message_text(
                                    text=text,
                                    chat_id=chat_id,
                                    message_id=message_id,
                                    parse_mode="HTML",
                                    reply_markup=keyboard
                                )
                            except Exception as edit_error:
                                if "message is not modified" in str(edit_error):
                                    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
                                else:
                                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {edit_error}")
                                    await self.bot.send_message(
                                        chat_id=chat_id,
                                        text=text,
                                        parse_mode="HTML",
                                        reply_markup=keyboard
                                    )
                        else:
                            await self.bot.send_message(
                                chat_id=chat_id,
                                text=text,
                                parse_mode="HTML",
                                reply_markup=keyboard
                            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            await self._send_error_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π")

    async def _send_statistics(self, chat_id: int, message_id: Optional[int] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.trader_api_url}/api/statistics") as response:
                    if response.status == 200:
                        data = await response.json()
                        stats = data.get('statistics', {})

                        total_trades = stats.get('total_trades', 0)
                        win_rate = stats.get('win_rate', 0)
                        total_pnl = stats.get('total_pnl', 0)
                        max_win = stats.get('max_win', 0)
                        max_loss = stats.get('max_loss', 0)

                        pnl_emoji = "üìà" if total_pnl >= 0 else "üìâ"
                        pnl_sign = "+" if total_pnl >= 0 else ""

                        text = (
                            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\n\n"
                            f"üî¢ <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {total_trades}\n"
                            f"üéØ <b>–í–∏–Ω—Ä–µ–π—Ç:</b> {win_rate:.1f}%\n"
                            f"{pnl_emoji} <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {pnl_sign}${total_pnl:.2f}\n"
                            f"üèÜ <b>–ú–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à:</b> +${max_win:.2f}\n"
                            f"üí∏ <b>–ú–∞–∫—Å. –ø—Ä–æ–∏–≥—Ä—ã—à:</b> -${abs(max_loss):.2f}\n\n"
                            f"üïí <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>"
                        )

                        keyboard = self._get_main_keyboard()

                        if message_id:
                            await self.bot.edit_message_text(
                                text=text,
                                chat_id=chat_id,
                                message_id=message_id,
                                parse_mode="HTML",
                                reply_markup=keyboard
                            )
                        else:
                            await self.bot.send_message(
                                chat_id=chat_id,
                                text=text,
                                parse_mode="HTML",
                                reply_markup=keyboard
                            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await self._send_error_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def _send_settings(self, chat_id: int, message_id: Optional[int] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if self.notifications_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        keyboard = self._get_settings_keyboard()

        if message_id:
            await self.bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

    async def _start_trading(self, chat_id: int, message_id: Optional[int] = None):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.trader_api_url}/api/start") as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('success'):
                            await self.bot.send_message(
                                chat_id=chat_id,
                                text="‚úÖ <b>–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!</b>",
                                parse_mode="HTML"
                            )
                        else:
                            await self._send_error_message(chat_id, data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            await self._send_error_message(chat_id, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")

    async def _stop_trading(self, chat_id: int, message_id: Optional[int] = None):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.trader_api_url}/api/stop") as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('success'):
                            await self.bot.send_message(
                                chat_id=chat_id,
                                text="‚èπÔ∏è <b>–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>",
                                parse_mode="HTML"
                            )
                        else:
                            await self._send_error_message(chat_id, data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            await self._send_error_message(chat_id, "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏")

    async def _toggle_notifications(self, chat_id: int, message_id: Optional[int] = None):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notifications_enabled = not self.notifications_enabled
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if self.notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"

        await self.bot.send_message(
            chat_id=chat_id,
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}",
            parse_mode="HTML"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await self._send_settings(chat_id, message_id)

    async def _reset_account(self, chat_id: int, message_id: Optional[int] = None):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.trader_api_url}/api/reset") as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('success'):
                            await self.bot.send_message(
                                chat_id=chat_id,
                                text="üîÑ <b>–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!</b>",
                                parse_mode="HTML"
                            )
                        else:
                            await self._send_error_message(chat_id, data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç–∞: {e}")
            await self._send_error_message(chat_id, "–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç–∞")

    async def _send_main_menu(self, chat_id: int, message_id: Optional[int] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = (
            "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        keyboard = self._get_main_keyboard()

        if message_id:
            await self.bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

    async def _send_error_message(self, chat_id: int, error_text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        await self.bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_text}",
            parse_mode="HTML"
        )

    async def send_trade_notification(self, trade_type: str, symbol: str, quantity: float,
                                      price: float, pnl: Optional[float] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""
        if not self.notifications_enabled:
            return

        try:
            if trade_type.upper() == "BUY":
                emoji = "üí∞"
                action = "–ü–æ–∫—É–ø–∫–∞"
                text = (
                    f"{emoji} <b>{action} –∞–∫—Ü–∏–π</b>\n\n"
                    f"üìä <b>–°–∏–º–≤–æ–ª:</b> {symbol}\n"
                    f"üíé <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity:.2f}\n"
                    f"üí∞ <b>–¶–µ–Ω–∞:</b> ${price:.2f}\n"
                    f"üíµ <b>–°—É–º–º–∞:</b> ${quantity * price:.2f}\n"
                    f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
                )
            elif trade_type.upper() == "SELL":
                emoji = "üí∏"
                action = "–ü—Ä–æ–¥–∞–∂–∞"
                pnl_emoji = "üìà" if pnl and pnl >= 0 else "üìâ"
                pnl_sign = "+" if pnl and pnl >= 0 else ""

                text = (
                    f"{emoji} <b>{action} –∞–∫—Ü–∏–π</b>\n\n"
                    f"üìä <b>–°–∏–º–≤–æ–ª:</b> {symbol}\n"
                    f"üíé <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity:.2f}\n"
                    f"üí∞ <b>–¶–µ–Ω–∞:</b> ${price:.2f}\n"
                    f"üíµ <b>–°—É–º–º–∞:</b> ${quantity * price:.2f}\n"
                    f"{pnl_emoji} <b>–ü—Ä–∏–±—ã–ª—å:</b> {pnl_sign}${pnl:.2f if pnl else 0:.2f}\n"
                    f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
                )
            else:
                return

            await self.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode="HTML"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def send_risk_warning(self, warning_type: str, details: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö"""
        if not self.notifications_enabled:
            return

        try:
            text = (
                f"‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –†–ò–°–ö–ê–•</b>\n\n"
                f"üö® <b>–¢–∏–ø:</b> {warning_type}\n"
                f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> {details}\n"
                f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
            )

            await self.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode="HTML"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")

    async def monitor_positions(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–∑–∏—Ü–∏—è—Ö"""
        while True:
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(f"{self.trader_api_url}/api/status") as response:
                        if response.status == 200:
                            data = await response.json()
                            current_positions = {pos['symbol']: pos for pos in data.get('positions', [])}

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–∫—É–ø–∫–∏)
                            for symbol, pos in current_positions.items():
                                if symbol not in self.last_positions:
                                    await self.send_trade_notification(
                                        "BUY", symbol, pos['quantity'], pos['entry_price']
                                    )

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–ø—Ä–æ–¥–∞–∂–∏)
                            for symbol, old_pos in self.last_positions.items():
                                if symbol not in current_positions:
                                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL
                                    # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
                                    await self.send_trade_notification(
                                        "SELL", symbol, old_pos['quantity'], old_pos['current_price'],
                                        old_pos.get('unrealized_pnl', 0)
                                    )

                            self.last_positions = current_positions

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")

            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self.monitor_positions())

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await self.dp.start_polling(self.bot)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open('telegram_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
    except FileNotFoundError:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = {
            "bot_token": "YOUR_BOT_TOKEN_HERE",
            "chat_id": "YOUR_CHAT_ID_HERE",
            "trader_api_url": "http://localhost:5000"
        }

        with open('telegram_config.json', 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)

        print("‚ùå –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª telegram_config.json")
        print("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ bot_token –∏ chat_id, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")
        return

    bot_token = config.get('bot_token')
    chat_id = config.get('chat_id')
    trader_api_url = config.get('trader_api_url', 'http://localhost:5000')

    if not bot_token or bot_token == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ bot_token –≤ telegram_config.json")
        return

    if not chat_id or chat_id == "YOUR_CHAT_ID_HERE":
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ chat_id –≤ telegram_config.json")
        return

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    telegram_bot = TradingTelegramBot(bot_token, chat_id, trader_api_url)
    await telegram_bot.start_polling()


if __name__ == "__main__":
    asyncio.run(main())
